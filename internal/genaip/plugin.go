package genaip

import (
	"fmt"

	"google.golang.org/genproto/googleapis/api/annotations"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/reflect/protoregistry"
)

// PluginName is the name of the Rust AIP protobuf compiler plugin.
const PluginName = "protoc-gen-rust-aip"

const generatedFilenameSuffix = "_aip.rs"

type Config struct {
	IncludeResourceDefinitions bool
}

// Run the Rust AIP protobuf compiler plugin.
func Run(gen *protogen.Plugin, config Config) error {
	var files protoregistry.Files
	var generatedFiles []string

	for _, file := range gen.Files {
		if err := files.RegisterFile(file.Desc); err != nil {
			return err
		}
	}

	for _, file := range gen.Files {
		if !file.Generate {
			continue
		}
		g := newGeneratedFile(gen, file)
		g.Skip()

		// Don't add imports to individual files when we're generating include_aip.rs
		// The imports will be in include_aip.rs instead
		hasResources := false

		var rangeErr error
		rangeResourcesInFile(
			file.Desc,
			func(resource *annotations.ResourceDescriptor, extension protoreflect.ExtensionType) bool {
				if !config.IncludeResourceDefinitions && extension == annotations.E_ResourceDefinition {
					return true
				}
				g.Unskip()
				hasResources = true

				// Skip adding imports to individual files since they'll be in include_aip.rs

				if err := (resourceNameCodeGenerator{
					resource: resource,
					files:    &files,
					file:     file,
				}).GenerateCode(g); err != nil {
					rangeErr = err
					return false
				}
				return true
			},
		)
		if rangeErr != nil {
			return rangeErr
		}

		// Track generated files that contain resources
		if hasResources {
			generatedFiles = append(generatedFiles, file.GeneratedFilenamePrefix+generatedFilenameSuffix)
		}
	}

	// Generate the consolidated include_aip.rs file if we have any generated files
	if len(generatedFiles) > 0 {
		if err := generateIncludeAipFile(gen, generatedFiles); err != nil {
			return err
		}
	}

	return nil
}

func generateIncludeAipFile(gen *protogen.Plugin, generatedFiles []string) error {
	g := gen.NewGeneratedFile("include_aip.rs", "")
	g.P("// Code generated by ", PluginName, ". DO NOT EDIT.")
	g.P("//")
	g.P("// This file includes all generated AIP resource name files.")
	g.P("// Include this file in your lib.rs to import all AIP resource names:")
	g.P("// include!(\"gen/include_aip.rs\");")
	g.P("//")
	g.P("// versions:")
	g.P("// \t", PluginName, " ", PluginVersion)
	g.P("// \tprotoc ", getProtocVersion(gen))
	g.P()

	// Add imports once at the top level
	g.P("use std::fmt;")
	g.P("use std::str::FromStr;")
	g.P()

	for _, file := range generatedFiles {
		g.P("include!(\"", file, "\");")
	}

	return nil
}

func newGeneratedFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	g := gen.NewGeneratedFile(file.GeneratedFilenamePrefix+generatedFilenameSuffix, file.GoImportPath)
	g.P("// Code generated by ", PluginName, ". DO NOT EDIT.")
	g.P("//")
	g.P("// versions:")
	g.P("// \t", PluginName, " ", PluginVersion)
	g.P("// \tprotoc ", getProtocVersion(gen))
	g.P("// source: ", file.Desc.Path())
	g.P()
	return g
}

func getProtocVersion(gen *protogen.Plugin) string {
	if v := gen.Request.GetCompilerVersion(); v != nil {
		return fmt.Sprintf("v%v.%v.%v", v.GetMajor(), v.GetMinor(), v.GetPatch())
	}
	return "(unknown)"
}

func rangeResourcesInFile(
	file protoreflect.FileDescriptor,
	fn func(resource *annotations.ResourceDescriptor, extension protoreflect.ExtensionType) bool,
) {
	for _, resource := range proto.GetExtension(
		file.Options(), annotations.E_ResourceDefinition,
	).([]*annotations.ResourceDescriptor) {
		if !fn(resource, annotations.E_ResourceDefinition) {
			return
		}
	}
	for i := 0; i < file.Messages().Len(); i++ {
		resource := proto.GetExtension(
			file.Messages().Get(i).Options(), annotations.E_Resource,
		).(*annotations.ResourceDescriptor)
		if resource == nil {
			continue
		}
		if !fn(resource, annotations.E_Resource) {
			return
		}
	}
}
