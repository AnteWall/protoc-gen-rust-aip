// Generated by protoc-gen-rust-aip
// DO NOT EDIT

// Package: example.comprehensive.v1

use std::fmt;
use std::str::FromStr;

/// Resource name for pubsub.googleapis.com/Topic
/// Patterns: [projects/{project}/topics/{topic}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Topic {
    raw: String,
}

impl Topic {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Topic {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Topic {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Topic {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for users.googleapis.com/User
/// Patterns: [users/{user}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct User {
    raw: String,
}

impl User {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for User {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for User {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for User {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for docs.googleapis.com/Document
/// Patterns: [users/{user}/documents/{document} projects/{project}/documents/{document}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Document {
    raw: String,
}

impl Document {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Document {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Document {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Document {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for spanner.googleapis.com/Instance
/// Patterns: [projects/{project}/instances/{instance} organizations/{organization}/instances/{instance}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Instance {
    raw: String,
}

impl Instance {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Instance {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Instance {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Instance {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for spanner.googleapis.com/Database
/// Patterns: [projects/{project}/instances/{instance}/databases/{database} organizations/{organization}/instances/{instance}/databases/{database}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Database {
    raw: String,
}

impl Database {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Database {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Database {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Database {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for cloudresourcemanager.googleapis.com/Project
/// Patterns: [projects/{project}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Project {
    raw: String,
}

impl Project {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Project {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Project {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Project {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for storage.googleapis.com/Bucket
/// Patterns: [projects/{project}/buckets/{bucket}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Bucket {
    raw: String,
}

impl Bucket {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Bucket {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Bucket {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Bucket {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


/// Resource name for storage.googleapis.com/Object
/// Patterns: [projects/{project}/buckets/{bucket}/objects/{object}]
#[derive(Debug, Clone, PartialEq, Eq, Hash)]
pub struct Object {
    raw: String,
}

impl Object {
    pub fn new(name: impl Into<String>) -> Self {
        Self { raw: name.into() }
    }

    pub fn as_str(&self) -> &str {
        &self.raw
    }
}

impl fmt::Display for Object {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.raw)
    }
}

impl FromStr for Object {
    type Err = String;

    fn from_str(s: &str) -> Result<Self, Self::Err> {
        // TODO: Add pattern validation
        Ok(Self::new(s))
    }
}

impl From<String> for Object {
    fn from(s: String) -> Self {
        Self::new(s)
    }
}


