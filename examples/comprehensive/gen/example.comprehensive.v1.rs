// @generated
// This file is @generated by prost-build.
// ===== BASIC RESOURCE PATTERNS =====

/// Simple topic resource (basic pattern)
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Topic {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(map="string, string", tag="3")]
    pub labels: ::std::collections::HashMap<::prost::alloc::string::String, ::prost::alloc::string::String>,
}
// ===== COLLECTION ID PATTERNS =====

/// User resource with simple collection ID
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct User {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub email: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub display_name: ::prost::alloc::string::String,
}
/// Document resource with nested collections and multiple parent patterns
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Document {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub title: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub content: ::prost::alloc::string::String,
    /// Reference to the user who owns this document
    #[prost(string, tag="4")]
    pub owner: ::prost::alloc::string::String,
}
// ===== MULTI-PATTERN RESOURCES =====

/// Instance that can exist at project or organization level
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Instance {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub config: ::prost::alloc::string::String,
    #[prost(int32, tag="4")]
    pub node_count: i32,
}
/// Database resource that can exist under different instance patterns
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Database {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub state: ::prost::alloc::string::String,
    /// Reference to the instance that contains this database
    #[prost(string, tag="4")]
    pub instance: ::prost::alloc::string::String,
}
// ===== RESOURCE REFERENCES =====

/// Project resource
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Project {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub project_id: ::prost::alloc::string::String,
}
/// Bucket resource that references a project
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Bucket {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub display_name: ::prost::alloc::string::String,
    #[prost(string, tag="3")]
    pub location: ::prost::alloc::string::String,
    /// Reference to the project that contains this bucket
    #[prost(string, tag="4")]
    pub project: ::prost::alloc::string::String,
}
/// Object resource with complex nesting
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Object {
    #[prost(string, tag="1")]
    pub name: ::prost::alloc::string::String,
    #[prost(string, tag="2")]
    pub content_type: ::prost::alloc::string::String,
    #[prost(int64, tag="3")]
    pub size: i64,
    /// Reference to the bucket that contains this object
    #[prost(string, tag="4")]
    pub bucket: ::prost::alloc::string::String,
}
// ===== SERVICE METHODS DEMONSTRATING USAGE =====

/// Request messages showing various resource reference patterns
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateTopicRequest {
    /// Parent resource (project) where the topic will be created
    #[prost(string, tag="1")]
    pub parent: ::prost::alloc::string::String,
    /// The topic to create
    #[prost(message, optional, tag="2")]
    pub topic: ::core::option::Option<Topic>,
    /// The topic ID to use
    #[prost(string, tag="3")]
    pub topic_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDocumentRequest {
    /// Parent can be either a user or project
    #[prost(string, tag="1")]
    pub parent: ::prost::alloc::string::String,
    /// The document to create
    #[prost(message, optional, tag="2")]
    pub document: ::core::option::Option<Document>,
    /// The document ID to use
    #[prost(string, tag="3")]
    pub document_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDatabaseRequest {
    /// Parent instance (can be at project or organization level)
    #[prost(string, tag="1")]
    pub parent: ::prost::alloc::string::String,
    /// The database to create
    #[prost(message, optional, tag="2")]
    pub database: ::core::option::Option<Database>,
    /// The database ID to use
    #[prost(string, tag="3")]
    pub database_id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsRequest {
    /// Parent bucket
    #[prost(string, tag="1")]
    pub parent: ::prost::alloc::string::String,
    /// Standard list parameters
    #[prost(int32, tag="2")]
    pub page_size: i32,
    #[prost(string, tag="3")]
    pub page_token: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListObjectsResponse {
    #[prost(message, repeated, tag="1")]
    pub objects: ::prost::alloc::vec::Vec<Object>,
    #[prost(string, tag="2")]
    pub next_page_token: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
