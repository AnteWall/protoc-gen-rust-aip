syntax = "proto3";

package example.library.v1;

import "google/api/resource.proto";

option go_package = "github.com/AnteWall/protoc-gen-rust-aip/examples/comprehensive/gen";

// Single pattern resource: A simple book resource.
message Book {
  option (google.api.resource) = {
    type: "library.googleapis.com/Book"
    pattern: "projects/{project}/books/{book}"
    singular: "book"
    plural: "books"
  };

  string name = 1;
  string title = 2;
  string author = 3;
}

// Multi-pattern resource: A shelf that can exist under projects or users.
message Shelf {
  option (google.api.resource) = {
    type: "library.googleapis.com/Shelf"
    pattern: "projects/{project}/shelves/{shelf}"
    pattern: "users/{user}/shelves/{shelf}"
    singular: "shelf"
    plural: "shelves"
  };

  string name = 1;
  string display_name = 2;
}

// Future multi-pattern resource: Currently single pattern but expected to have more.
message Author {
  option (google.api.resource) = {
    type: "library.googleapis.com/Author"
    pattern: "authors/{author}"
    history: FUTURE_MULTI_PATTERN
    singular: "author"
    plural: "authors"
  };

  string name = 1;
  string display_name = 2;
  string biography = 3;
}

// Nested resource: A review that belongs to a book.
message Review {
  option (google.api.resource) = {
    type: "library.googleapis.com/Review"
    pattern: "projects/{project}/books/{book}/reviews/{review}"
    singular: "review"
    plural: "reviews"
  };

  string name = 1;
  string content = 2;
  int32 rating = 3;
}

// Complex multi-pattern resource: A publisher that can exist at different levels.
message Publisher {
  option (google.api.resource) = {
    type: "library.googleapis.com/Publisher"
    pattern: "publishers/{publisher}"
    pattern: "organizations/{organization}/publishers/{publisher}"
    pattern: "projects/{project}/publishers/{publisher}"
    history: ORIGINALLY_SINGLE_PATTERN
    singular: "publisher"
    plural: "publishers"
  };

  string name = 1;
  string display_name = 2;
  string website = 3;
}

// Resource with child type reference
message ListBooksRequest {
  // The parent resource name. Uses child_type to indicate this field
  // references the parent of Book resources.
  string parent = 1 [(google.api.resource_reference) = {
    child_type: "library.googleapis.com/Book"
  }];

  int32 page_size = 2;
  string page_token = 3;
}

// Resource with direct type reference
message GetBookRequest {
  // The name of the book to retrieve.
  string name = 1 [(google.api.resource_reference) = {
    type: "library.googleapis.com/Book"
  }];
}

// Resource with wildcard reference (any resource)
message GetResourceRequest {
  // The name of any resource.
  string name = 1 [(google.api.resource_reference) = {
    type: "*"
  }];
}

// Service definition
service LibraryService {
  // Gets a book.
  rpc GetBook(GetBookRequest) returns (Book);

  // Lists books.
  rpc ListBooks(ListBooksRequest) returns (ListBooksResponse);
}

message ListBooksResponse {
  repeated Book books = 1;
  string next_page_token = 2;
}
